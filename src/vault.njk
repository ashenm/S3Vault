/**
 * Global Scripts
 * vault.ashenm.ml
 *
 * Ashen Gunaratne
 * mail@ashenm.ml
 *
 */

(function () {

  /* global AWS */
  /* global AmazonCognitoIdentity */

  'use strict';

  /**
   * @constant
   * @type {object}
   * @description AWS S3 SDK
   */
  var S3;

  /**
   * @constant
   * @type {object}
   * @description Runtime Cognito configurations
   */
  var CONFIGURATION = {

    // aws resource region
    Region: '{{ Region }}',

    // hosted ui
    AppWebDomain: '{{ AppWebDomain }}',

    // cognito specifics
    CongnitoClientID: '{{ CongnitoClientID }}',
    CongnitoUserPoolId: '{{ CongnitoUserPoolId }}',
    CongnitoTokenScope: {{ CongnitoTokenScope | stringify }},
    CongnitoRedirectUriSignIn: {{ CongnitoRedirectUriSignIn }},
    CongnitoRedirectUriSignOut: {{ CongnitoRedirectUriSignOut }},
    CongnitoAdvancedSecurityDataCollectionFlag: {{ CongnitoAdvancedSecurityDataCollectionFlag }},
    CognitoIdentityPoolId: '{{ CognitoIdentityPoolId }}',

    // s3 specifics
    S3Bucket: {{ S3Bucket }}

  };

  /**
   * @constant
   * @type {object}
   * @description Common HTTP status code to message mapping
   */
  var HTTP_STATUS = {
    '400': 'Bad Request',
    '402': 'Unauthorized',
    '403': 'Forbidden',
    '404': 'Not Found',
    '406': 'Not Acceptable',
    '500': 'Internal Server Error'
  };

  /**
   * @function initialise
   * @description Initialise Vault viewport
   */
  var initialise = function () {

    // initialize s3 sdk
    S3 = new AWS.S3();

    // ?download
    if (window.location.search === '?download'
     && window.location.pathname.slice(-1) !== '/') {

      // generate and redirect to pre-signed URL
      window.location.href = S3.getSignedUrl('getObject', {
        Bucket: CONFIGURATION.S3Bucket,
        Key: window.location.pathname.replace(/^\//, '')
      });

      return;

    }

    // ?view
    if (window.location.search === '?view'
     && window.location.pathname.slice(-1) !== '/') {

      S3.getObject({
        Bucket: CONFIGURATION.S3Bucket,
        Key: window.location.pathname.replace(/^\//, '').concat('.highlight')
      }, function (err, data) {
        err ? error(err.statusCode, err.message) : $('body').html(data.Body.toString('utf8')).addClass('view');
      });

      $('head').append('<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.9/styles/github.min.css" integrity="sha256-iAmWN8uaUdN6Y9FCf8srQdrx3eVVwouJ5QtEiyuTQ6A=" crossorigin="anonymous" />');

      return;

    }

    // render breadcrumbs
    $('header').append('<nav aria-label="breadcrumb"><a href="/">' + window.location.hostname + '/</a>'
      + window.location.pathname.replace(/^\//, '').replace(/([^/]{1,}\/{0,1})/g, '<a href="/$`$1">$1</a>') + '</nav>');

    // if url still ends with foo reveal 406
    if (window.location.pathname.slice(-1) !== '/') {
      error('406');
      return;
    }

    // render pre-generated listing
    S3.getObject({
      Bucket: CONFIGURATION.S3Bucket,
      Key: window.location.pathname.replace(/^\//, '').concat('index.partial')
    }, function (err, data) {
      err ? error(err.statusCode, err.message) : $('main').html(data.Body.toString('utf8')).find('.readable').click(toggle);
    });

  };

  /**
   * @function error
   * @argument {string} code
   * @argument {string} message
   * @description Renders parameterised error code and message on viewport
   */
  var error = function (code, message) {
    return $('main').text((code || '500') + ' ' + (HTTP_STATUS[code || 500] || message || '')).removeClass().addClass('error');
  };

  /**
   * @function toggle
   * @argument {event} event
   * @description Toggles between readable and raw metadata values
   */
  var toggle = function (event) {

    const $this = $(this);
    const text = $this.text();

    if ($this.hasClass('size')) {
      $this._ = 'size';
    } else if ($this.hasClass('mtime')) {
      $this._ = 'mtime';
    }

    $this.toggleClass('raw')
      .toggleClass('readable')
      .text($this.data($this._))
      .data($this._, text);

  };

  // ondomcontentloaded
  // initialize auth engine
  $(function () {

    var unity = sessionStorage.getItem('unity');
    var memento = sessionStorage.getItem('memento');
    var exposition = sessionStorage.getItem('exposition');

    var cognito = new AmazonCognitoIdentity.CognitoAuth({
      ClientId: CONFIGURATION.CongnitoClientID,
      AppWebDomain: CONFIGURATION.AppWebDomain,
      TokenScopesArray: CONFIGURATION.CongnitoTokenScope,
      RedirectUriSignIn: CONFIGURATION.CongnitoRedirectUriSignIn,
      RedirectUriSignOut: CONFIGURATION.CongnitoRedirectUriSignOut,
      IdentityProvider: CONFIGURATION.CongnitoIdentityProvider,
      UserPoolId: CONFIGURATION.CongnitoUserPoolId,
      AdvancedSecurityDataCollectionFlag: CONFIGURATION.CongnitoAdvancedSecurityDataCollectionFlag
    });

    cognito.userhandler = {

      onSuccess: function (e) {

        if (unity && memento && exposition) {

          AWS.config.credentials = new AWS.Credentials({
            accessKeyId: unity,
            secretAccessKey: exposition,
            sessionToken: memento
          });

        } else {

          AWS.config.credentials = new AWS.CognitoIdentityCredentials({
            IdentityPoolId: CONFIGURATION.CognitoIdentityPoolId,
            Logins: { [ 'cognito-idp.' + CONFIGURATION.Region + '.amazonaws.com/' + CONFIGURATION.CongnitoUserPoolId ]: e.getIdToken().getJwtToken() }
          }, { region: CONFIGURATION.Region });

        }

        AWS.config.credentials.get(function (err) {

          if (err) {
            error();
            return;
          }

          sessionStorage.setItem('unity', AWS.config.credentials.accessKeyId);
          sessionStorage.setItem('memento', AWS.config.credentials.sessionToken);
          sessionStorage.setItem('exposition', AWS.config.credentials.secretAccessKey);

          if (e.state) {
            window.location.href = JSON.parse(decodeURIComponent(e.state)).redirect;
            return;
          }

          initialise();

        });

      },

      onFailure: function (e) {
        error();
      }

    };

    // preserve deeplinks during auth flow
    cognito.setState(encodeURIComponent(JSON.stringify({
      redirect: window.location.href,
      provision: cognito.generateRandomString(cognito.getCognitoConstants().STATELENGTH, cognito.getCognitoConstants().STATEORIGINSTRING)
    })));

    cognito.parseCognitoWebResponse(window.location.href);
    cognito.getSession();

  });

})();

/* vim: set expandtab shiftwidth=2 syntax=javascript: */
